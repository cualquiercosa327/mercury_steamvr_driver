notes. 

vcpkg packages:
opencv:x64-windows
eigen3:x64-windows
pthreads:x64-windows

zlib ??

for some reason needed aux_util and aux_vive to worky. disturbing.

https://docs.microsoft.com/en-us/cpp/build/reference/bigobj-increase-number-of-sections-in-dot-obj-file?view=msvc-170


git lfs
https://github.com/git-lfs/git-lfs/releases/tag/v3.2.0
don't really care about how to get hand tracking models, just needs to work.

todo:
figure out why aux_vive requires zlib, remove if necessary

figure out how to not compile psvr/psmv/t_kalman along with rest of aux_tracking. make an aux_tracking_psmv?
make those depend on if the psmv driver is active?

steamvr.vrsettings unnecessary

/mnt/c/Program Files (x86)/Steam/steamapps/common/SteamVR/bin/win64/vrpathreg.exe

"Program Files (x86)/Steam/steamapps/common/SteamVR/bin/win64/vrpathreg.exe"

vrpathreg may not have been enough - might need

```
	"external_drivers" : 
	[
		C:\dev\ht_windows_steamvr_2\out\build\x64-Debug\steamvr-monado\"
	],
```

in openvrpaths.vrpath

oh wait no vrpathreg added that for us :P hmm yep it 10% did

ok so.... wat?



Severity	Code	Description	Project	File	Line	Suppression State
Error		CMake Error at C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake:230 (message):
  Could NOT find Python3 (missing: Python3_EXECUTABLE Interpreter)		C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/share/cmake-3.22/Modules/FindPackageHandleStandardArgs.cmake	230	


in cmd:
"C:/Program Files (x86)/Steam/steamapps/common/SteamVR/bin/win64/vrpathreg.exe" adddriver "C:/dev/mercury_steamvr_driver/build/mercury"
"C:/Program Files (x86)/Steam/steamapps/common/SteamVR/bin/win64/vrpathreg.exe" adddriver "C:/dev/mercury_steamvr_driver/build/mercury"

okay so:
You get cryptic "the program was unable to start" or something errors if onnxruntime.dll isn't present either on the machine or in the install dir. I think you can just do CRIMES and copy it

StereoKit reveals this issue that the hand joint sizes are totally wrong

vcpkg in manifest mode solved so many problems
pwsh scripts were good
bleh





flow:

One `MercuryHandDevice` per hand.

??? creation stuff
DeviceProvider::Init:
    uses Get/CreateHMDConfig which uses lighthouse_console.exe and saves it to ...some internal path, who cares, then loads it using std::ifstream. Very good.
     creates: DeviceProvider::HandTrackingThread using std::thread
DeviceProvider::HandTrackingThread



without pretending to be index controllers:
the hand's forward axis seems to be my wrist's +Z, so totally backwards. the thumb seems to be closer, when my back of my hand is facing me/the camera, and the palms are both facing out. 
with pretending to be index controllers: literally no difference afaict



Remember, we really can't supply more than one pose. 

When you call
    vr::VRServerDriverHost()->TrackedDevicePoseUpdated(device_id_, pose, sizeof(vr::DriverPose_t));
that goes straight to /pose/raw and there's nothing you can do about it.


If you want to euro-filter the aim pose:

It's probably fine to update the hand skeleton at say 500Hz, in the same loop as updating /pose/raw





```
#include <windows.h>
#include <tlhelp32.h>
#include <string>



// void kill_processes(const std::wstring &name)
// {
//     // Create a snapshot of the running processes
//     HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
//     if (snapshot == INVALID_HANDLE_VALUE)
//     {
//         // Error: Failed to create snapshot
//         return;
//     }

//     // Initialize the process entry structure
//     PROCESSENTRY32 entry;
//     entry.dwSize = sizeof(PROCESSENTRY32);

//     // Iterate over all processes in the snapshot
//     if (Process32First(snapshot, &entry) == TRUE)
//     {
//         do
//         {
//             // Check if the process name matches the target name
//             if (_wcsicmp(entry.szExeFile, name.c_str()) == 0)
//             {
//                 // Open a handle to the process with the PROCESS_TERMINATE flag
//                 HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, entry.th32ProcessID);
//                 if (hProcess != NULL)
//                 {
//                     // Terminate the process with an exit code of 0
//                     TerminateProcess(hProcess, 0);
//                     CloseHandle(hProcess);
//                 }
//             }
//         } while (Process32Next(snapshot, &entry) == TRUE);
//     }

//     // Close the snapshot handle
//     CloseHandle(snapshot);
// }
```